/* The following code was generated by JFlex 1.4.3 on 10/5/13 5:10 PM */

package org.dylanfoundry.deft.filetypes.dylan;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.dylanfoundry.deft.filetypes.dylan.psi.DylanTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/5/13 5:10 PM from the specification file
 * <tt>/home/cek/Dev/dylan-lang/DeftIDEA/src/org/dylanfoundry/deft/filetypes/dylan/Dylan.flex</tt>
 */
class DylanLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_VALUE = 2;
  public static final int STRING = 8;
  public static final int YYINITIAL = 0;
  public static final int DYLAN_CODE = 4;
  public static final int SYMBOL = 10;
  public static final int COMMENT_BLOCK = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\36\1\35\1\0\1\40\1\34\22\0\1\37\1\3\1\41"+
    "\1\23\2\3\1\13\1\20\1\65\1\66\1\11\1\10\1\73\1\7"+
    "\1\33\1\12\1\21\1\26\6\26\2\1\1\16\1\74\1\14\1\5"+
    "\1\15\1\4\1\3\1\24\1\24\2\24\1\31\1\24\10\2\1\27"+
    "\13\2\1\67\1\17\1\70\1\13\1\3\1\0\1\30\1\25\1\54"+
    "\1\57\1\32\1\43\1\52\1\62\1\53\1\2\1\47\1\51\1\61"+
    "\1\44\1\55\1\56\1\2\1\22\1\46\1\42\1\63\1\64\1\60"+
    "\1\45\1\50\1\2\1\71\1\13\1\72\1\6\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\1\1\3\2\4\1\5\1\6"+
    "\2\7\2\10\1\11\1\12\1\1\1\13\1\14\1\15"+
    "\1\16\4\17\4\1\3\12\1\20\2\21\1\1\15\12"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\3\32\2\33\1\32\3\34\4\0\1\11\1\35\1\0"+
    "\1\36\1\37\1\40\1\17\1\11\2\0\1\41\1\0"+
    "\1\42\1\0\1\17\1\43\1\0\1\44\1\0\4\45"+
    "\3\0\1\11\1\0\1\46\1\0\1\11\1\0\1\47"+
    "\2\0\1\50\1\51\6\12\1\11\3\0\1\52\11\12"+
    "\1\53\17\12\1\54\1\55\1\11\2\0\1\42\1\0"+
    "\2\42\1\0\1\17\5\0\1\45\1\56\1\0\1\11"+
    "\1\0\1\35\2\0\2\12\1\57\1\60\2\12\1\61"+
    "\4\12\1\62\23\12\1\63\1\12\1\11\1\0\1\42"+
    "\3\0\1\64\2\12\1\53\2\12\1\65\22\12\1\66"+
    "\1\0\1\67\5\12\1\70\2\12\1\71\5\12\1\72"+
    "\5\12\1\0\1\73\4\12\1\74\3\12\1\75\1\76"+
    "\1\77\1\100\2\12\1\0\2\12\1\101\1\102\3\12"+
    "\1\103\1\12\1\0\1\104\1\12\1\105\2\12\1\106"+
    "\1\107\2\12\1\110\10\12\1\111\2\12\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u0131\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0131\0\u0319"+
    "\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501"+
    "\0\u0501\0\u040d\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f"+
    "\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u0131\0\u07dd\0\u081a"+
    "\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02"+
    "\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0131\0\u0131\0\u0131\0\u0131"+
    "\0\u0131\0\u0131\0\u0131\0\u0131\0\u0131\0\u0b33\0\u0b70\0\u0bad"+
    "\0\u0131\0\u0bea\0\u0c27\0\u0225\0\u0131\0\u0c64\0\u0ca1\0\u0cde"+
    "\0\u0d1b\0\u0d58\0\u0d95\0\u040d\0\u0131\0\u040d\0\u040d\0\u0dd2"+
    "\0\u0e0f\0\u0e4c\0\u0e89\0\u0131\0\u0ec6\0\u0f03\0\u0f40\0\u0f40"+
    "\0\u0131\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb"+
    "\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u0131\0\u1259\0\u1296"+
    "\0\u12d3\0\u0131\0\u1310\0\u134d\0\u0131\0\u0131\0\u138a\0\u13c7"+
    "\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u07dd"+
    "\0\u0131\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d"+
    "\0\u175a\0\u1797\0\u03d0\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8"+
    "\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0"+
    "\0\u1aed\0\u1b2a\0\u0131\0\u0131\0\u0cde\0\u1b67\0\u1ba4\0\u1be1"+
    "\0\u1c1e\0\u0131\0\u0f40\0\u1c5b\0\u0131\0\u1c98\0\u1cd5\0\u1d12"+
    "\0\u1d4f\0\u0d95\0\u1d8c\0\u0131\0\u1dc9\0\u1259\0\u1e06\0\u0131"+
    "\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u03d0\0\u03d0\0\u1f37\0\u1f74"+
    "\0\u0131\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u03d0\0\u20a5\0\u20e2"+
    "\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca"+
    "\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2"+
    "\0\u24ef\0\u03d0\0\u252c\0\u1c98\0\u2569\0\u1c5b\0\u25a6\0\u25e3"+
    "\0\u2620\0\u0131\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\u03d0"+
    "\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u2939"+
    "\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21"+
    "\0\u2b5e\0\u2b9b\0\u0131\0\u2bd8\0\u0131\0\u2c15\0\u2c52\0\u2c8f"+
    "\0\u2ccc\0\u2d09\0\u03d0\0\u2d46\0\u2d83\0\u03d0\0\u2dc0\0\u2dfd"+
    "\0\u2e3a\0\u2e77\0\u2eb4\0\u03d0\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8"+
    "\0\u2fe5\0\u3022\0\u03d0\0\u305f\0\u309c\0\u30d9\0\u3116\0\u03d0"+
    "\0\u3153\0\u3190\0\u31cd\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u320a"+
    "\0\u3247\0\u3284\0\u32c1\0\u32fe\0\u03d0\0\u03d0\0\u333b\0\u3378"+
    "\0\u33b5\0\u03d0\0\u33f2\0\u342f\0\u03d0\0\u346c\0\u03d0\0\u34a9"+
    "\0\u34e6\0\u03d0\0\u0131\0\u3523\0\u3560\0\u03d0\0\u359d\0\u35da"+
    "\0\u3617\0\u3654\0\u3691\0\u36ce\0\u370b\0\u3748\0\u03d0\0\u3785"+
    "\0\u37c2\0\u03d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\6\1\7\7\6\1\10\3\6\1\11\3\6\1\7"+
    "\1\6\2\7\1\6\4\7\1\6\1\12\1\13\3\14"+
    "\1\6\23\7\10\6\17\15\1\6\14\15\1\16\1\17"+
    "\1\20\2\21\34\15\1\6\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\32\2\34"+
    "\1\35\1\36\1\37\1\22\1\23\1\40\1\23\1\41"+
    "\1\22\1\23\1\42\1\23\1\43\1\44\1\45\1\46"+
    "\3\21\1\47\1\23\1\50\2\23\1\51\2\23\1\52"+
    "\1\53\1\54\1\55\1\56\1\23\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\11\75\1\76\1\77\21\75\1\45"+
    "\1\46\37\75\34\6\1\100\1\101\37\6\76\0\2\7"+
    "\4\0\1\7\11\0\2\7\1\0\7\7\7\0\23\7"+
    "\22\0\1\102\116\0\1\103\1\104\73\0\1\103\1\105"+
    "\75\0\3\14\34\0\17\15\1\0\14\15\2\0\2\15"+
    "\1\0\34\15\35\0\1\17\37\0\17\15\1\0\14\15"+
    "\2\0\2\20\1\21\34\15\36\0\3\21\35\0\1\22"+
    "\1\106\7\107\1\110\3\107\3\0\1\22\1\106\1\0"+
    "\2\106\1\22\2\106\2\111\1\112\6\0\23\106\11\0"+
    "\15\23\1\113\2\0\2\23\1\0\7\23\7\0\23\23"+
    "\11\0\1\114\1\23\13\114\3\0\1\114\1\23\1\0"+
    "\2\23\1\114\4\23\7\0\23\23\14\0\1\115\71\0"+
    "\1\114\1\23\2\114\1\116\7\114\1\117\3\0\1\114"+
    "\1\23\1\0\2\23\1\114\4\23\7\0\23\23\15\0"+
    "\1\120\70\0\1\121\5\0\2\122\10\0\1\121\4\0"+
    "\1\121\4\0\1\123\52\0\1\124\1\102\63\0\1\114"+
    "\1\23\2\114\1\32\10\114\3\0\1\114\1\23\1\0"+
    "\2\23\1\114\4\23\7\0\23\23\11\0\1\125\1\126"+
    "\1\127\1\0\1\130\3\0\1\127\1\0\3\127\1\131"+
    "\2\0\1\125\1\126\1\0\2\126\1\125\4\126\7\0"+
    "\23\126\11\0\1\132\1\133\1\134\1\0\1\135\1\136"+
    "\2\137\1\140\1\137\1\140\2\135\1\141\2\0\1\132"+
    "\1\133\1\0\2\133\1\132\4\133\7\0\23\133\10\0"+
    "\17\142\1\143\1\0\54\142\1\0\1\144\17\0\1\144"+
    "\1\145\1\146\3\144\1\147\1\150\2\144\6\0\1\151"+
    "\1\152\1\144\1\153\2\0\1\154\4\0\1\144\1\147"+
    "\1\0\1\144\5\0\1\155\1\0\1\156\6\0\15\23"+
    "\1\113\2\0\2\23\1\0\6\23\1\157\7\0\7\23"+
    "\1\160\13\23\11\0\15\23\1\113\2\0\2\23\1\0"+
    "\7\23\7\0\7\23\1\161\13\23\11\0\15\23\1\113"+
    "\2\0\2\23\1\0\7\23\7\0\2\23\1\162\1\163"+
    "\3\23\1\164\13\23\11\0\1\165\5\0\2\166\10\0"+
    "\1\165\4\0\1\165\4\0\1\167\76\0\1\46\37\0"+
    "\41\170\1\171\33\170\1\0\15\23\1\113\2\0\2\23"+
    "\1\0\7\23\7\0\13\23\1\172\5\23\1\173\1\23"+
    "\11\0\15\23\1\113\2\0\2\23\1\0\6\23\1\174"+
    "\7\0\7\23\1\175\10\23\1\176\2\23\11\0\15\23"+
    "\1\113\2\0\2\23\1\0\6\23\1\177\7\0\11\23"+
    "\1\200\1\23\1\201\7\23\11\0\15\23\1\113\2\0"+
    "\2\23\1\0\6\23\1\202\7\0\23\23\11\0\15\23"+
    "\1\113\2\0\2\23\1\0\7\23\7\0\1\23\1\203"+
    "\21\23\11\0\15\23\1\113\2\0\1\23\1\204\1\0"+
    "\4\23\1\205\2\23\7\0\7\23\1\206\3\23\1\207"+
    "\7\23\11\0\15\23\1\113\2\0\2\23\1\0\7\23"+
    "\7\0\1\210\22\23\11\0\15\23\1\113\2\0\2\23"+
    "\1\0\6\23\1\211\7\0\13\23\1\212\7\23\11\0"+
    "\15\23\1\113\2\0\2\23\1\0\7\23\7\0\20\23"+
    "\1\213\2\23\11\0\15\23\1\113\2\0\2\23\1\0"+
    "\4\23\1\214\1\23\1\215\7\0\13\23\1\216\7\23"+
    "\11\0\15\23\1\113\2\0\2\23\1\0\4\23\1\217"+
    "\2\23\7\0\23\23\11\0\15\23\1\113\2\0\2\23"+
    "\1\0\7\23\7\0\2\23\1\220\1\23\1\221\16\23"+
    "\11\0\15\23\1\113\2\0\2\23\1\0\4\23\1\222"+
    "\2\23\7\0\23\23\22\0\1\223\73\0\1\224\120\0"+
    "\1\101\37\0\34\102\2\0\37\102\35\0\1\105\40\0"+
    "\1\107\1\23\13\107\3\0\1\107\1\23\1\0\2\23"+
    "\1\107\4\23\7\0\23\23\11\0\1\107\1\106\13\107"+
    "\3\0\1\107\1\106\1\0\2\106\1\107\4\106\7\0"+
    "\23\106\11\0\1\225\1\106\13\107\3\0\1\225\1\106"+
    "\1\0\2\106\1\225\4\106\7\0\23\106\11\0\1\225"+
    "\1\23\4\107\2\226\5\107\3\0\1\225\1\23\1\0"+
    "\2\23\1\225\4\23\7\0\23\23\11\0\1\165\5\0"+
    "\2\166\10\0\1\165\4\0\1\165\2\0\2\227\43\0"+
    "\1\125\1\126\1\127\1\0\1\230\1\231\1\0\1\232"+
    "\1\233\1\232\1\233\2\230\1\234\2\0\1\125\1\126"+
    "\1\0\2\126\1\125\4\126\7\0\23\126\15\0\1\235"+
    "\70\0\1\121\10\0\1\236\6\0\1\121\4\0\1\121"+
    "\2\0\2\227\1\112\42\0\1\237\17\0\1\237\4\0"+
    "\1\237\47\0\1\165\5\0\2\166\10\0\1\165\4\0"+
    "\1\165\47\0\1\125\1\240\13\125\3\0\1\125\1\240"+
    "\1\0\2\240\1\125\4\240\7\0\23\240\11\0\15\126"+
    "\3\0\2\126\1\0\7\126\7\0\23\126\11\0\1\127"+
    "\1\126\13\127\3\0\1\127\1\126\1\0\2\126\1\127"+
    "\4\126\7\0\23\126\11\0\1\132\1\241\13\132\3\0"+
    "\1\132\1\241\1\0\2\241\1\132\4\241\7\0\23\241"+
    "\11\0\15\133\1\242\2\0\2\133\1\0\7\133\7\0"+
    "\23\133\11\0\1\134\1\133\13\134\3\0\1\134\1\133"+
    "\1\0\2\133\1\134\4\133\7\0\23\133\11\0\1\134"+
    "\1\133\2\134\1\140\10\134\1\242\2\0\1\134\1\133"+
    "\1\0\2\133\1\134\4\133\7\0\23\133\15\0\1\243"+
    "\10\0\1\242\74\0\1\242\57\0\1\134\1\133\13\134"+
    "\1\242\2\0\1\134\1\133\1\0\2\133\1\134\4\133"+
    "\7\0\23\133\15\0\1\137\107\0\1\244\74\0\1\244"+
    "\2\142\2\0\1\142\2\0\1\142\1\0\1\142\7\0"+
    "\3\142\31\0\1\144\17\0\1\144\2\0\3\144\1\0"+
    "\3\144\10\0\1\144\10\0\1\144\2\0\1\144\47\0"+
    "\1\245\63\0\1\246\4\0\1\246\47\0\1\144\17\0"+
    "\1\144\2\0\3\144\1\0\3\144\10\0\1\144\5\0"+
    "\1\247\2\0\1\144\2\0\1\144\15\0\41\151\1\250"+
    "\33\151\32\0\1\251\74\0\1\252\43\0\15\23\1\113"+
    "\2\0\2\23\1\0\7\23\7\0\10\23\1\253\12\23"+
    "\11\0\15\23\1\113\2\0\2\23\1\0\7\23\7\0"+
    "\13\23\1\254\7\23\11\0\15\23\1\113\2\0\2\23"+
    "\1\0\7\23\7\0\7\23\1\255\13\23\11\0\15\23"+
    "\1\113\2\0\2\23\1\0\7\23\7\0\15\23\1\256"+
    "\5\23\11\0\15\23\1\113\2\0\2\23\1\0\7\23"+
    "\7\0\14\23\1\257\6\23\11\0\15\23\1\113\2\0"+
    "\2\23\1\0\7\23\7\0\4\23\1\260\16\23\11\0"+
    "\1\165\17\0\1\165\4\0\1\165\2\0\2\227\43\0"+
    "\1\165\17\0\1\165\4\0\1\165\101\0\1\261\42\0"+
    "\15\23\1\113\2\0\1\23\1\203\1\0\7\23\7\0"+
    "\23\23\11\0\15\23\1\113\2\0\2\23\1\0\7\23"+
    "\7\0\2\23\1\262\20\23\11\0\15\23\1\113\2\0"+
    "\2\23\1\0\7\23\7\0\7\23\1\263\13\23\11\0"+
    "\15\23\1\113\2\0\2\23\1\0\7\23\7\0\13\23"+
    "\1\264\7\23\11\0\15\23\1\113\2\0\2\23\1\0"+
    "\4\23\1\265\2\23\7\0\23\23\11\0\15\23\1\113"+
    "\2\0\2\23\1\0\7\23\7\0\1\266\22\23\11\0"+
    "\15\23\1\113\2\0\2\23\1\0\1\23\1\267\5\23"+
    "\7\0\23\23\11\0\15\23\1\113\2\0\2\23\1\0"+
    "\7\23\7\0\12\23\1\270\10\23\11\0\15\23\1\113"+
    "\2\0\2\23\1\0\7\23\7\0\2\23\1\271\20\23"+
    "\11\0\15\23\1\113\2\0\2\23\1\0\6\23\1\272"+
    "\7\0\23\23\11\0\15\23\1\113\2\0\2\23\1\0"+
    "\7\23\7\0\4\23\1\273\16\23\11\0\15\23\1\113"+
    "\2\0\2\23\1\0\4\23\1\274\2\23\7\0\23\23"+
    "\11\0\15\23\1\113\2\0\2\23\1\0\7\23\7\0"+
    "\2\23\1\275\11\23\1\276\6\23\11\0\15\23\1\113"+
    "\2\0\2\23\1\0\7\23\7\0\20\23\1\277\2\23"+
    "\11\0\15\23\1\113\2\0\2\23\1\0\7\23\7\0"+
    "\1\23\1\300\21\23\11\0\15\23\1\113\2\0\2\23"+
    "\1\0\7\23\7\0\17\23\1\301\3\23\11\0\15\23"+
    "\1\113\2\0\2\23\1\0\6\23\1\302\7\0\11\23"+
    "\1\303\11\23\11\0\15\23\1\113\2\0\2\23\1\0"+
    "\7\23\7\0\12\23\1\304\10\23\11\0\15\23\1\113"+
    "\2\0\2\23\1\0\7\23\7\0\1\305\22\23\11\0"+
    "\15\23\1\113\2\0\2\23\1\0\7\23\7\0\15\23"+
    "\1\306\5\23\11\0\15\23\1\113\2\0\2\23\1\0"+
    "\7\23\7\0\2\23\1\307\20\23\11\0\15\23\1\113"+
    "\2\0\2\23\1\0\7\23\7\0\1\310\6\23\1\311"+
    "\13\23\11\0\15\23\1\113\2\0\2\23\1\0\6\23"+
    "\1\312\7\0\23\23\11\0\15\23\1\113\2\0\1\23"+
    "\1\313\1\0\7\23\7\0\23\23\11\0\1\225\1\106"+
    "\4\107\2\110\5\107\3\0\1\225\1\106\1\0\2\106"+
    "\1\225\4\106\7\0\23\106\11\0\1\314\5\0\2\315"+
    "\10\0\1\314\4\0\1\314\47\0\1\127\1\126\2\127"+
    "\1\233\10\127\3\0\1\127\1\126\1\0\2\126\1\127"+
    "\4\126\7\0\23\126\15\0\1\316\74\0\1\232\70\0"+
    "\1\314\17\0\1\314\4\0\1\314\47\0\1\237\17\0"+
    "\1\237\4\0\1\237\2\0\2\227\1\112\42\0\1\125"+
    "\1\126\13\125\3\0\1\125\1\126\1\0\2\126\1\125"+
    "\4\126\7\0\23\126\11\0\1\132\1\133\13\132\3\0"+
    "\1\132\1\133\1\0\2\133\1\132\4\133\7\0\23\133"+
    "\15\0\1\137\10\0\1\242\124\0\1\317\77\0\1\320"+
    "\70\0\1\321\77\0\1\322\25\0\15\23\1\113\2\0"+
    "\2\23\1\0\7\23\7\0\11\23\1\302\11\23\11\0"+
    "\15\23\1\113\2\0\2\23\1\0\7\23\7\0\12\23"+
    "\1\323\10\23\11\0\15\23\1\113\2\0\2\23\1\0"+
    "\7\23\7\0\13\23\1\324\7\23\11\0\15\23\1\113"+
    "\2\0\2\23\1\0\6\23\1\325\7\0\23\23\11\0"+
    "\15\23\1\113\2\0\2\23\1\0\7\23\7\0\12\23"+
    "\1\326\10\23\11\0\15\23\1\113\2\0\2\23\1\0"+
    "\6\23\1\327\7\0\23\23\11\0\15\23\1\113\2\0"+
    "\2\23\1\0\7\23\7\0\1\330\22\23\11\0\15\23"+
    "\1\113\2\0\1\23\1\331\1\0\7\23\7\0\23\23"+
    "\11\0\15\23\1\113\2\0\1\23\1\332\1\0\7\23"+
    "\7\0\23\23\11\0\15\23\1\113\2\0\2\23\1\0"+
    "\4\23\1\333\2\23\7\0\23\23\11\0\15\23\1\113"+
    "\2\0\2\23\1\0\6\23\1\334\7\0\23\23\11\0"+
    "\15\23\1\113\2\0\2\23\1\0\4\23\1\335\2\23"+
    "\7\0\23\23\11\0\15\23\1\113\2\0\2\23\1\0"+
    "\6\23\1\203\7\0\23\23\11\0\15\23\1\113\2\0"+
    "\2\23\1\0\7\23\7\0\4\23\1\336\16\23\11\0"+
    "\15\23\1\113\2\0\2\23\1\0\7\23\7\0\4\23"+
    "\1\337\16\23\11\0\15\23\1\113\2\0\2\23\1\0"+
    "\7\23\7\0\6\23\1\340\14\23\11\0\15\23\1\113"+
    "\2\0\2\23\1\0\6\23\1\341\7\0\23\23\11\0"+
    "\15\23\1\113\2\0\2\23\1\0\7\23\7\0\11\23"+
    "\1\342\11\23\11\0\15\23\1\113\2\0\2\23\1\0"+
    "\4\23\1\343\2\23\7\0\23\23\11\0\15\23\1\113"+
    "\2\0\2\23\1\0\7\23\7\0\2\23\1\203\20\23"+
    "\11\0\15\23\1\113\2\0\2\23\1\0\7\23\7\0"+
    "\7\23\1\273\13\23\11\0\15\23\1\113\2\0\1\23"+
    "\1\344\1\0\7\23\7\0\23\23\11\0\15\23\1\113"+
    "\2\0\2\23\1\0\7\23\7\0\20\23\1\345\2\23"+
    "\11\0\15\23\1\113\2\0\2\23\1\0\7\23\7\0"+
    "\21\23\1\346\1\23\11\0\15\23\1\113\2\0\2\23"+
    "\1\0\7\23\7\0\15\23\1\347\5\23\11\0\15\23"+
    "\1\113\2\0\2\23\1\0\7\23\7\0\11\23\1\350"+
    "\11\23\11\0\15\23\1\113\2\0\2\23\1\0\6\23"+
    "\1\351\7\0\23\23\11\0\15\23\1\113\2\0\2\23"+
    "\1\0\7\23\7\0\11\23\1\352\11\23\11\0\1\314"+
    "\5\0\2\236\10\0\1\314\4\0\1\314\110\0\1\353"+
    "\41\0\1\354\127\0\1\355\33\0\15\23\1\113\2\0"+
    "\2\23\1\0\7\23\7\0\5\23\1\203\15\23\11\0"+
    "\15\23\1\113\2\0\1\23\1\356\1\0\7\23\7\0"+
    "\23\23\11\0\15\23\1\113\2\0\2\23\1\0\7\23"+
    "\7\0\11\23\1\54\11\23\11\0\15\23\1\113\2\0"+
    "\2\23\1\0\7\23\7\0\1\357\22\23\11\0\15\23"+
    "\1\113\2\0\2\23\1\0\7\23\7\0\12\23\1\360"+
    "\10\23\11\0\15\23\1\113\2\0\2\23\1\0\6\23"+
    "\1\361\7\0\23\23\11\0\15\23\1\113\2\0\2\23"+
    "\1\0\4\23\1\362\2\23\7\0\23\23\11\0\15\23"+
    "\1\113\2\0\2\23\1\0\7\23\7\0\7\23\1\363"+
    "\13\23\11\0\15\23\1\113\2\0\1\23\1\364\1\0"+
    "\7\23\7\0\23\23\11\0\15\23\1\113\2\0\2\23"+
    "\1\0\7\23\7\0\1\365\22\23\11\0\15\23\1\113"+
    "\2\0\2\23\1\0\7\23\7\0\4\23\1\366\16\23"+
    "\11\0\15\23\1\113\2\0\2\23\1\0\7\23\7\0"+
    "\1\367\22\23\11\0\6\23\1\370\6\23\1\113\2\0"+
    "\2\23\1\0\7\23\7\0\23\23\11\0\15\23\1\113"+
    "\2\0\1\23\1\371\1\0\7\23\7\0\23\23\11\0"+
    "\15\23\1\113\2\0\2\23\1\0\7\23\7\0\2\23"+
    "\1\372\20\23\11\0\15\23\1\113\2\0\2\23\1\0"+
    "\7\23\7\0\11\23\1\373\11\23\11\0\15\23\1\113"+
    "\2\0\2\23\1\0\7\23\7\0\13\23\1\374\7\23"+
    "\11\0\15\23\1\113\2\0\2\23\1\0\7\23\7\0"+
    "\13\23\1\375\7\23\11\0\15\23\1\113\2\0\2\23"+
    "\1\0\7\23\7\0\7\23\1\376\13\23\11\0\15\23"+
    "\1\113\2\0\2\23\1\0\7\23\7\0\7\23\1\377"+
    "\13\23\11\0\15\23\1\113\2\0\2\23\1\0\7\23"+
    "\7\0\7\23\1\203\13\23\11\0\15\23\1\113\2\0"+
    "\2\23\1\0\7\23\7\0\4\23\1\u0100\16\23\11\0"+
    "\15\23\1\113\2\0\2\23\1\0\4\23\1\u0101\2\23"+
    "\7\0\23\23\57\0\1\u0102\26\0\15\23\1\113\2\0"+
    "\2\23\1\0\7\23\7\0\1\u0103\22\23\11\0\15\23"+
    "\1\113\2\0\2\23\1\0\7\23\7\0\11\23\1\u0104"+
    "\11\23\11\0\15\23\1\113\2\0\2\23\1\0\7\23"+
    "\7\0\1\203\22\23\11\0\15\23\1\113\2\0\2\23"+
    "\1\0\7\23\7\0\15\23\1\u0105\5\23\11\0\15\23"+
    "\1\113\2\0\1\23\1\u0106\1\0\7\23\7\0\23\23"+
    "\11\0\15\23\1\113\2\0\2\23\1\0\7\23\7\0"+
    "\11\23\1\u0107\11\23\11\0\15\23\1\113\2\0\2\23"+
    "\1\0\6\23\1\u0108\7\0\23\23\11\0\15\23\1\113"+
    "\2\0\2\23\1\0\4\23\1\u0109\2\23\7\0\23\23"+
    "\11\0\15\23\1\113\2\0\2\23\1\0\7\23\7\0"+
    "\15\23\1\u010a\5\23\11\0\15\23\1\113\2\0\2\23"+
    "\1\0\7\23\7\0\16\23\1\u010b\4\23\11\0\15\23"+
    "\1\113\2\0\2\23\1\0\6\23\1\u010c\7\0\23\23"+
    "\11\0\15\23\1\113\2\0\2\23\1\0\7\23\7\0"+
    "\2\23\1\u010d\20\23\11\0\15\23\1\113\2\0\2\23"+
    "\1\0\7\23\7\0\15\23\1\u010e\5\23\11\0\15\23"+
    "\1\113\2\0\2\23\1\0\6\23\1\u010f\7\0\23\23"+
    "\11\0\15\23\1\113\2\0\2\23\1\0\6\23\1\u0110"+
    "\7\0\23\23\11\0\15\23\1\113\2\0\2\23\1\0"+
    "\7\23\7\0\4\23\1\203\16\23\11\0\15\23\1\113"+
    "\2\0\2\23\1\0\1\23\1\u0111\5\23\7\0\23\23"+
    "\42\0\1\u0112\43\0\15\23\1\113\2\0\2\23\1\0"+
    "\7\23\7\0\13\23\1\u0113\7\23\11\0\6\23\1\u0114"+
    "\6\23\1\113\2\0\2\23\1\0\7\23\7\0\23\23"+
    "\11\0\15\23\1\113\2\0\2\23\1\0\7\23\7\0"+
    "\6\23\1\u0115\14\23\11\0\15\23\1\113\2\0\2\23"+
    "\1\0\7\23\7\0\12\23\1\u0116\10\23\11\0\15\23"+
    "\1\113\2\0\2\23\1\0\7\23\7\0\2\23\1\u0117"+
    "\20\23\11\0\15\23\1\113\2\0\2\23\1\0\7\23"+
    "\7\0\13\23\1\u0118\7\23\11\0\15\23\1\113\2\0"+
    "\2\23\1\0\7\23\7\0\11\23\1\u0119\11\23\11\0"+
    "\15\23\1\113\2\0\1\23\1\u011a\1\0\7\23\7\0"+
    "\23\23\11\0\15\23\1\113\2\0\2\23\1\0\7\23"+
    "\7\0\7\23\1\u011b\13\23\60\0\1\u011c\25\0\15\23"+
    "\1\113\2\0\2\23\1\0\7\23\7\0\2\23\1\u011d"+
    "\20\23\11\0\15\23\1\113\2\0\2\23\1\0\7\23"+
    "\7\0\4\23\1\u011e\16\23\11\0\15\23\1\113\2\0"+
    "\2\23\1\0\7\23\7\0\1\u011f\22\23\11\0\15\23"+
    "\1\113\2\0\2\23\1\0\7\23\7\0\16\23\1\u0120"+
    "\4\23\11\0\15\23\1\113\2\0\2\23\1\0\7\23"+
    "\7\0\4\23\1\u0121\16\23\11\0\15\23\1\113\2\0"+
    "\2\23\1\0\6\23\1\u0122\7\0\23\23\56\0\1\u0123"+
    "\27\0\15\23\1\113\2\0\2\23\1\0\7\23\7\0"+
    "\6\23\1\u0124\14\23\11\0\15\23\1\113\2\0\2\23"+
    "\1\0\7\23\7\0\2\23\1\u0125\20\23\11\0\15\23"+
    "\1\113\2\0\2\23\1\0\6\23\1\u0126\7\0\23\23"+
    "\11\0\15\23\1\113\2\0\2\23\1\0\7\23\7\0"+
    "\17\23\1\u0127\3\23\11\0\6\23\1\u0128\6\23\1\113"+
    "\2\0\2\23\1\0\7\23\7\0\23\23\11\0\15\23"+
    "\1\113\2\0\2\23\1\0\1\23\1\u0129\5\23\7\0"+
    "\23\23\11\0\15\23\1\113\2\0\2\23\1\0\7\23"+
    "\7\0\17\23\1\u012a\3\23\11\0\15\23\1\113\2\0"+
    "\2\23\1\0\7\23\7\0\13\23\1\u012b\7\23\11\0"+
    "\15\23\1\113\2\0\2\23\1\0\6\23\1\u012c\7\0"+
    "\23\23\11\0\15\23\1\113\2\0\2\23\1\0\7\23"+
    "\7\0\7\23\1\u012d\13\23\11\0\15\23\1\113\2\0"+
    "\2\23\1\0\7\23\7\0\1\u012e\22\23\11\0\15\23"+
    "\1\113\2\0\2\23\1\0\7\23\7\0\4\23\1\u012f"+
    "\16\23\11\0\15\23\1\113\2\0\2\23\1\0\7\23"+
    "\7\0\20\23\1\u0130\2\23\11\0\15\23\1\113\2\0"+
    "\2\23\1\0\7\23\7\0\13\23\1\u0131\7\23\11\0"+
    "\15\23\1\113\2\0\2\23\1\0\7\23\7\0\15\23"+
    "\1\u0132\5\23\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14335];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\2\1\1\11\5\1\1\11\26\1\1\11"+
    "\16\1\11\11\3\1\1\11\3\1\1\11\4\0\2\1"+
    "\1\0\1\11\4\1\2\0\1\11\1\0\1\1\1\0"+
    "\1\1\1\11\1\0\1\1\1\0\4\1\3\0\1\1"+
    "\1\0\1\11\1\0\1\1\1\0\1\11\2\0\2\11"+
    "\7\1\3\0\1\11\31\1\2\11\1\1\2\0\1\1"+
    "\1\0\1\11\1\1\1\0\1\11\5\0\1\1\1\11"+
    "\1\0\1\1\1\0\1\11\2\0\6\1\1\11\33\1"+
    "\1\0\1\1\3\0\1\11\30\1\1\11\1\0\1\11"+
    "\24\1\1\0\17\1\1\0\11\1\1\0\6\1\1\11"+
    "\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    int commentLevel = 0;
    boolean afterDefine = false;


  DylanLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  DylanLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { return DylanTypes.RBRACE;
          }
        case 75: break;
        case 21: 
          { return DylanTypes.RBRACKET;
          }
        case 76: break;
        case 22: 
          { return DylanTypes.LBRACE;
          }
        case 77: break;
        case 40: 
          { return DylanTypes.HASH_PAREN;
          }
        case 78: break;
        case 51: 
          { return DylanTypes.USE;
          }
        case 79: break;
        case 74: 
          { return DylanTypes.COPY_DOWN_METHOD;
          }
        case 80: break;
        case 60: 
          { return DylanTypes.CREATE;
          }
        case 81: break;
        case 41: 
          { return DylanTypes.HASH_BRACKET;
          }
        case 82: break;
        case 27: 
          { yybegin(DYLAN_CODE); return DylanTypes.CRLF;
          }
        case 83: break;
        case 43: 
          { return DylanTypes.NONDEFINING_BEGIN_WORD;
          }
        case 84: break;
        case 42: 
          { return DylanTypes.STRING;
          }
        case 85: break;
        case 72: 
          { return DylanTypes.OTHERWISE;
          }
        case 86: break;
        case 55: 
          { return DylanTypes.HASH_NEXT;
          }
        case 87: break;
        case 46: 
          { return DylanTypes.CHARACTER_LITERAL;
          }
        case 88: break;
        case 19: 
          { return DylanTypes.RPAREN;
          }
        case 89: break;
        case 20: 
          { return DylanTypes.LBRACKET;
          }
        case 90: break;
        case 36: 
          { return DylanTypes.ESCAPED_WORD;
          }
        case 91: break;
        case 26: 
          { return DylanTypes.COMMENT;
          }
        case 92: break;
        case 68: 
          { if (afterDefine) return DylanTypes.DEFINE_BODY_FUNCTION_WORD; else return DylanTypes.NONDEFINING_NONEXPRESSION_WORD;
          }
        case 93: break;
        case 16: 
          { return DylanTypes.DOT;
          }
        case 94: break;
        case 5: 
          { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
          }
        case 95: break;
        case 38: 
          { return DylanTypes.HASH_HASH;
          }
        case 96: break;
        case 39: 
          { return DylanTypes.HASH_T;
          }
        case 97: break;
        case 8: 
          { return TokenType.WHITE_SPACE;
          }
        case 98: break;
        case 34: 
          { return DylanTypes.CONSTRAINED_NAME;
          }
        case 99: break;
        case 35: 
          { return DylanTypes.COLON_COLON;
          }
        case 100: break;
        case 61: 
          { afterDefine = true; return DylanTypes.DEFINE;
          }
        case 101: break;
        case 44: 
          { commentLevel--; if (commentLevel == 0) { yybegin(DYLAN_CODE);} return DylanTypes.COMMENT;
          }
        case 102: break;
        case 53: 
          { return DylanTypes.SLOT;
          }
        case 103: break;
        case 12: 
          { return DylanTypes.EQUAL;
          }
        case 104: break;
        case 56: 
          { return DylanTypes.LOCAL;
          }
        case 105: break;
        case 67: 
          { return DylanTypes.HANDLER_T;
          }
        case 106: break;
        case 9: 
          { return DylanTypes.NUMBER;
          }
        case 107: break;
        case 70: 
          { return DylanTypes.VARIABLE_T;
          }
        case 108: break;
        case 11: 
          { return DylanTypes.QUERY;
          }
        case 109: break;
        case 3: 
          { yybegin(WAITING_VALUE); return DylanTypes.HEADER_SEPARATOR;
          }
        case 110: break;
        case 28: 
          { yybegin(DYLAN_CODE); return  DylanTypes.CRLF;
          }
        case 111: break;
        case 54: 
          { return DylanTypes.HASH_REST;
          }
        case 112: break;
        case 10: 
          { return DylanTypes.NONDEFINING_NONEXPRESSION_WORD;
          }
        case 113: break;
        case 59: 
          { return DylanTypes.EXPORT;
          }
        case 114: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 115: break;
        case 52: 
          { return DylanTypes.HASH_KEY;
          }
        case 116: break;
        case 47: 
          { return DylanTypes.ALL;
          }
        case 117: break;
        case 7: 
          { yybegin(YYINITIAL); return DylanTypes.CRLF;
          }
        case 118: break;
        case 33: 
          { yybegin(COMMENT_BLOCK); commentLevel++; return DylanTypes.COMMENT;
          }
        case 119: break;
        case 58: 
          { return DylanTypes.MACRO_T;
          }
        case 120: break;
        case 24: 
          { return DylanTypes.COMMA;
          }
        case 121: break;
        case 49: 
          { return DylanTypes.ELLIPSIS;
          }
        case 122: break;
        case 32: 
          { return DylanTypes.EQUAL_ARROW;
          }
        case 123: break;
        case 17: 
          { /* return DylanTypes.CRLF; */
          }
        case 124: break;
        case 69: 
          { return DylanTypes.CONSTANT_T;
          }
        case 125: break;
        case 14: 
          { return DylanTypes.UNARY_AND_BINARY_OPERATOR;
          }
        case 126: break;
        case 25: 
          { return DylanTypes.SEMICOLON;
          }
        case 127: break;
        case 45: 
          { commentLevel++; yybegin(COMMENT_BLOCK); return DylanTypes.COMMENT;
          }
        case 128: break;
        case 62: 
          { return DylanTypes.DOMAIN;
          }
        case 129: break;
        case 73: 
          { return DylanTypes.SHARED_SYMBOLS_T;
          }
        case 130: break;
        case 65: 
          { return DylanTypes.LIBRARY;
          }
        case 131: break;
        case 6: 
          { yybegin(YYINITIAL); return DylanTypes.HEADER_VALUE;
          }
        case 132: break;
        case 31: 
          { return DylanTypes.EQUAL_EQUAL;
          }
        case 133: break;
        case 57: 
          { return DylanTypes.CLASS;
          }
        case 134: break;
        case 50: 
          { return DylanTypes.LET;
          }
        case 135: break;
        case 15: 
          { return DylanTypes.BINARY_OPERATOR_ONLY;
          }
        case 136: break;
        case 66: 
          { return DylanTypes.GENERIC;
          }
        case 137: break;
        case 64: 
          { return DylanTypes.MODULE;
          }
        case 138: break;
        case 29: 
          { return DylanTypes.SYMBOL;
          }
        case 139: break;
        case 18: 
          { afterDefine = false; return DylanTypes.LPAREN;
          }
        case 140: break;
        case 13: 
          { return DylanTypes.UNARY_OPERATOR_ONLY;
          }
        case 141: break;
        case 30: 
          { return DylanTypes.QUERY_QUERY;
          }
        case 142: break;
        case 4: 
          { return DylanTypes.CRLF;
          }
        case 143: break;
        case 48: 
          { return DylanTypes.END;
          }
        case 144: break;
        case 63: 
          { return DylanTypes.METHOD;
          }
        case 145: break;
        case 2: 
          { return DylanTypes.KEY;
          }
        case 146: break;
        case 37: 
          { return DylanTypes.OPERATOR_NAME;
          }
        case 147: break;
        case 71: 
          { return DylanTypes.HASH_ALL_KEYS;
          }
        case 148: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
